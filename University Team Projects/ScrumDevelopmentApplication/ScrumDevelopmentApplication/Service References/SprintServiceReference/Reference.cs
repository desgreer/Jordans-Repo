//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ScrumDevelopmentApplication.SprintServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SprintServiceReference.ISprintService")]
    public interface ISprintService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISprintService/AddSprint", ReplyAction="http://tempuri.org/ISprintService/AddSprintResponse")]
        bool AddSprint(string name, string startDate, string endDate, int projectId, string userEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISprintService/AddSprint", ReplyAction="http://tempuri.org/ISprintService/AddSprintResponse")]
        System.Threading.Tasks.Task<bool> AddSprintAsync(string name, string startDate, string endDate, int projectId, string userEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISprintService/GetSprintList", ReplyAction="http://tempuri.org/ISprintService/GetSprintListResponse")]
        string[] GetSprintList(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISprintService/GetSprintList", ReplyAction="http://tempuri.org/ISprintService/GetSprintListResponse")]
        System.Threading.Tasks.Task<string[]> GetSprintListAsync(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISprintService/SearchForSprintUser", ReplyAction="http://tempuri.org/ISprintService/SearchForSprintUserResponse")]
        string[] SearchForSprintUser(string searchString, bool productOwner, bool scrumMaster, bool developer, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISprintService/SearchForSprintUser", ReplyAction="http://tempuri.org/ISprintService/SearchForSprintUserResponse")]
        System.Threading.Tasks.Task<string[]> SearchForSprintUserAsync(string searchString, bool productOwner, bool scrumMaster, bool developer, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISprintService/AddSprintStory", ReplyAction="http://tempuri.org/ISprintService/AddSprintStoryResponse")]
        bool AddSprintStory(int storyId, int sprintId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISprintService/AddSprintStory", ReplyAction="http://tempuri.org/ISprintService/AddSprintStoryResponse")]
        System.Threading.Tasks.Task<bool> AddSprintStoryAsync(int storyId, int sprintId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISprintService/GetSprintStories", ReplyAction="http://tempuri.org/ISprintService/GetSprintStoriesResponse")]
        string[] GetSprintStories(int sprintId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISprintService/GetSprintStories", ReplyAction="http://tempuri.org/ISprintService/GetSprintStoriesResponse")]
        System.Threading.Tasks.Task<string[]> GetSprintStoriesAsync(int sprintId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISprintService/GetUserSprints", ReplyAction="http://tempuri.org/ISprintService/GetUserSprintsResponse")]
        string[] GetUserSprints(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISprintService/GetUserSprints", ReplyAction="http://tempuri.org/ISprintService/GetUserSprintsResponse")]
        System.Threading.Tasks.Task<string[]> GetUserSprintsAsync(string email);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISprintServiceChannel : ScrumDevelopmentApplication.SprintServiceReference.ISprintService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SprintServiceClient : System.ServiceModel.ClientBase<ScrumDevelopmentApplication.SprintServiceReference.ISprintService>, ScrumDevelopmentApplication.SprintServiceReference.ISprintService {
        
        public SprintServiceClient() {
        }
        
        public SprintServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SprintServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SprintServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SprintServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddSprint(string name, string startDate, string endDate, int projectId, string userEmail) {
            return base.Channel.AddSprint(name, startDate, endDate, projectId, userEmail);
        }
        
        public System.Threading.Tasks.Task<bool> AddSprintAsync(string name, string startDate, string endDate, int projectId, string userEmail) {
            return base.Channel.AddSprintAsync(name, startDate, endDate, projectId, userEmail);
        }
        
        public string[] GetSprintList(int projectId) {
            return base.Channel.GetSprintList(projectId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetSprintListAsync(int projectId) {
            return base.Channel.GetSprintListAsync(projectId);
        }
        
        public string[] SearchForSprintUser(string searchString, bool productOwner, bool scrumMaster, bool developer, int projectId) {
            return base.Channel.SearchForSprintUser(searchString, productOwner, scrumMaster, developer, projectId);
        }
        
        public System.Threading.Tasks.Task<string[]> SearchForSprintUserAsync(string searchString, bool productOwner, bool scrumMaster, bool developer, int projectId) {
            return base.Channel.SearchForSprintUserAsync(searchString, productOwner, scrumMaster, developer, projectId);
        }
        
        public bool AddSprintStory(int storyId, int sprintId) {
            return base.Channel.AddSprintStory(storyId, sprintId);
        }
        
        public System.Threading.Tasks.Task<bool> AddSprintStoryAsync(int storyId, int sprintId) {
            return base.Channel.AddSprintStoryAsync(storyId, sprintId);
        }
        
        public string[] GetSprintStories(int sprintId) {
            return base.Channel.GetSprintStories(sprintId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetSprintStoriesAsync(int sprintId) {
            return base.Channel.GetSprintStoriesAsync(sprintId);
        }
        
        public string[] GetUserSprints(string email) {
            return base.Channel.GetUserSprints(email);
        }
        
        public System.Threading.Tasks.Task<string[]> GetUserSprintsAsync(string email) {
            return base.Channel.GetUserSprintsAsync(email);
        }
    }
}
