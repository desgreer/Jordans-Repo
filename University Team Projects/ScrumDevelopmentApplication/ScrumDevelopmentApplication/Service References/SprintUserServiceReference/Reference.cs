//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ScrumDevelopmentApplication.SprintUserServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SprintUserServiceReference.ISprintUserService")]
    public interface ISprintUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISprintUserService/InsertSprintUser", ReplyAction="http://tempuri.org/ISprintUserService/InsertSprintUserResponse")]
        bool InsertSprintUser(string email, bool scrumMaster, bool productOwner, bool developer, int projectId, int sprintId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISprintUserService/InsertSprintUser", ReplyAction="http://tempuri.org/ISprintUserService/InsertSprintUserResponse")]
        System.Threading.Tasks.Task<bool> InsertSprintUserAsync(string email, bool scrumMaster, bool productOwner, bool developer, int projectId, int sprintId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISprintUserService/GetProjectTeamList", ReplyAction="http://tempuri.org/ISprintUserService/GetProjectTeamListResponse")]
        string[] GetProjectTeamList(string sprintId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISprintUserService/GetProjectTeamList", ReplyAction="http://tempuri.org/ISprintUserService/GetProjectTeamListResponse")]
        System.Threading.Tasks.Task<string[]> GetProjectTeamListAsync(string sprintId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISprintUserService/IsProjectOwner", ReplyAction="http://tempuri.org/ISprintUserService/IsProjectOwnerResponse")]
        bool IsProjectOwner(string email, string sprintId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISprintUserService/IsProjectOwner", ReplyAction="http://tempuri.org/ISprintUserService/IsProjectOwnerResponse")]
        System.Threading.Tasks.Task<bool> IsProjectOwnerAsync(string email, string sprintId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISprintUserService/IsProductOwner", ReplyAction="http://tempuri.org/ISprintUserService/IsProductOwnerResponse")]
        bool IsProductOwner(string email, string sprintId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISprintUserService/IsProductOwner", ReplyAction="http://tempuri.org/ISprintUserService/IsProductOwnerResponse")]
        System.Threading.Tasks.Task<bool> IsProductOwnerAsync(string email, string sprintId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISprintUserService/IsScrumMaster", ReplyAction="http://tempuri.org/ISprintUserService/IsScrumMasterResponse")]
        bool IsScrumMaster(string email, string sprintId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISprintUserService/IsScrumMaster", ReplyAction="http://tempuri.org/ISprintUserService/IsScrumMasterResponse")]
        System.Threading.Tasks.Task<bool> IsScrumMasterAsync(string email, string sprintId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISprintUserService/IsDeveloper", ReplyAction="http://tempuri.org/ISprintUserService/IsDeveloperResponse")]
        bool IsDeveloper(string email, string sprintId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISprintUserService/IsDeveloper", ReplyAction="http://tempuri.org/ISprintUserService/IsDeveloperResponse")]
        System.Threading.Tasks.Task<bool> IsDeveloperAsync(string email, string sprintId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISprintUserService/IsUserInTheSprint", ReplyAction="http://tempuri.org/ISprintUserService/IsUserInTheSprintResponse")]
        bool IsUserInTheSprint(string email, int sprintId, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISprintUserService/IsUserInTheSprint", ReplyAction="http://tempuri.org/ISprintUserService/IsUserInTheSprintResponse")]
        System.Threading.Tasks.Task<bool> IsUserInTheSprintAsync(string email, int sprintId, int projectId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISprintUserServiceChannel : ScrumDevelopmentApplication.SprintUserServiceReference.ISprintUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SprintUserServiceClient : System.ServiceModel.ClientBase<ScrumDevelopmentApplication.SprintUserServiceReference.ISprintUserService>, ScrumDevelopmentApplication.SprintUserServiceReference.ISprintUserService {
        
        public SprintUserServiceClient() {
        }
        
        public SprintUserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SprintUserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SprintUserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SprintUserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool InsertSprintUser(string email, bool scrumMaster, bool productOwner, bool developer, int projectId, int sprintId) {
            return base.Channel.InsertSprintUser(email, scrumMaster, productOwner, developer, projectId, sprintId);
        }
        
        public System.Threading.Tasks.Task<bool> InsertSprintUserAsync(string email, bool scrumMaster, bool productOwner, bool developer, int projectId, int sprintId) {
            return base.Channel.InsertSprintUserAsync(email, scrumMaster, productOwner, developer, projectId, sprintId);
        }
        
        public string[] GetProjectTeamList(string sprintId) {
            return base.Channel.GetProjectTeamList(sprintId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetProjectTeamListAsync(string sprintId) {
            return base.Channel.GetProjectTeamListAsync(sprintId);
        }
        
        public bool IsProjectOwner(string email, string sprintId) {
            return base.Channel.IsProjectOwner(email, sprintId);
        }
        
        public System.Threading.Tasks.Task<bool> IsProjectOwnerAsync(string email, string sprintId) {
            return base.Channel.IsProjectOwnerAsync(email, sprintId);
        }
        
        public bool IsProductOwner(string email, string sprintId) {
            return base.Channel.IsProductOwner(email, sprintId);
        }
        
        public System.Threading.Tasks.Task<bool> IsProductOwnerAsync(string email, string sprintId) {
            return base.Channel.IsProductOwnerAsync(email, sprintId);
        }
        
        public bool IsScrumMaster(string email, string sprintId) {
            return base.Channel.IsScrumMaster(email, sprintId);
        }
        
        public System.Threading.Tasks.Task<bool> IsScrumMasterAsync(string email, string sprintId) {
            return base.Channel.IsScrumMasterAsync(email, sprintId);
        }
        
        public bool IsDeveloper(string email, string sprintId) {
            return base.Channel.IsDeveloper(email, sprintId);
        }
        
        public System.Threading.Tasks.Task<bool> IsDeveloperAsync(string email, string sprintId) {
            return base.Channel.IsDeveloperAsync(email, sprintId);
        }
        
        public bool IsUserInTheSprint(string email, int sprintId, int projectId) {
            return base.Channel.IsUserInTheSprint(email, sprintId, projectId);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserInTheSprintAsync(string email, int sprintId, int projectId) {
            return base.Channel.IsUserInTheSprintAsync(email, sprintId, projectId);
        }
    }
}
