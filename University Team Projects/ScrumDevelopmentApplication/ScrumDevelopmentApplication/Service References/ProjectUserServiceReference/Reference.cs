//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ScrumDevelopmentApplication.ProjectUserServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProjectUserServiceReference.IProjectUserService")]
    public interface IProjectUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectUserService/InsertProjectUser", ReplyAction="http://tempuri.org/IProjectUserService/InsertProjectUserResponse")]
        bool InsertProjectUser(string email, bool scrumMaster, bool productOwner, bool developer, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectUserService/InsertProjectUser", ReplyAction="http://tempuri.org/IProjectUserService/InsertProjectUserResponse")]
        System.Threading.Tasks.Task<bool> InsertProjectUserAsync(string email, bool scrumMaster, bool productOwner, bool developer, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectUserService/DeleteProjectUser", ReplyAction="http://tempuri.org/IProjectUserService/DeleteProjectUserResponse")]
        bool DeleteProjectUser(string email, int projectId, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectUserService/DeleteProjectUser", ReplyAction="http://tempuri.org/IProjectUserService/DeleteProjectUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteProjectUserAsync(string email, int projectId, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectUserService/IsProjectOwner", ReplyAction="http://tempuri.org/IProjectUserService/IsProjectOwnerResponse")]
        bool IsProjectOwner(string email, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectUserService/IsProjectOwner", ReplyAction="http://tempuri.org/IProjectUserService/IsProjectOwnerResponse")]
        System.Threading.Tasks.Task<bool> IsProjectOwnerAsync(string email, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectUserService/IsProductOwner", ReplyAction="http://tempuri.org/IProjectUserService/IsProductOwnerResponse")]
        bool IsProductOwner(string email, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectUserService/IsProductOwner", ReplyAction="http://tempuri.org/IProjectUserService/IsProductOwnerResponse")]
        System.Threading.Tasks.Task<bool> IsProductOwnerAsync(string email, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectUserService/IsScrumMaster", ReplyAction="http://tempuri.org/IProjectUserService/IsScrumMasterResponse")]
        bool IsScrumMaster(string email, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectUserService/IsScrumMaster", ReplyAction="http://tempuri.org/IProjectUserService/IsScrumMasterResponse")]
        System.Threading.Tasks.Task<bool> IsScrumMasterAsync(string email, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectUserService/IsDeveloper", ReplyAction="http://tempuri.org/IProjectUserService/IsDeveloperResponse")]
        bool IsDeveloper(string email, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectUserService/IsDeveloper", ReplyAction="http://tempuri.org/IProjectUserService/IsDeveloperResponse")]
        System.Threading.Tasks.Task<bool> IsDeveloperAsync(string email, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectUserService/GetAssociatedProjectList", ReplyAction="http://tempuri.org/IProjectUserService/GetAssociatedProjectListResponse")]
        string[] GetAssociatedProjectList(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectUserService/GetAssociatedProjectList", ReplyAction="http://tempuri.org/IProjectUserService/GetAssociatedProjectListResponse")]
        System.Threading.Tasks.Task<string[]> GetAssociatedProjectListAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectUserService/GetProjectTeamList", ReplyAction="http://tempuri.org/IProjectUserService/GetProjectTeamListResponse")]
        string[] GetProjectTeamList(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectUserService/GetProjectTeamList", ReplyAction="http://tempuri.org/IProjectUserService/GetProjectTeamListResponse")]
        System.Threading.Tasks.Task<string[]> GetProjectTeamListAsync(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectUserService/DeleteProductOwner", ReplyAction="http://tempuri.org/IProjectUserService/DeleteProductOwnerResponse")]
        void DeleteProductOwner(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectUserService/DeleteProductOwner", ReplyAction="http://tempuri.org/IProjectUserService/DeleteProductOwnerResponse")]
        System.Threading.Tasks.Task DeleteProductOwnerAsync(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectUserService/IsUserInTheProject", ReplyAction="http://tempuri.org/IProjectUserService/IsUserInTheProjectResponse")]
        bool IsUserInTheProject(string email, int projectId, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectUserService/IsUserInTheProject", ReplyAction="http://tempuri.org/IProjectUserService/IsUserInTheProjectResponse")]
        System.Threading.Tasks.Task<bool> IsUserInTheProjectAsync(string email, int projectId, string role);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProjectUserServiceChannel : ScrumDevelopmentApplication.ProjectUserServiceReference.IProjectUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProjectUserServiceClient : System.ServiceModel.ClientBase<ScrumDevelopmentApplication.ProjectUserServiceReference.IProjectUserService>, ScrumDevelopmentApplication.ProjectUserServiceReference.IProjectUserService {
        
        public ProjectUserServiceClient() {
        }
        
        public ProjectUserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProjectUserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProjectUserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProjectUserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool InsertProjectUser(string email, bool scrumMaster, bool productOwner, bool developer, int projectId) {
            return base.Channel.InsertProjectUser(email, scrumMaster, productOwner, developer, projectId);
        }
        
        public System.Threading.Tasks.Task<bool> InsertProjectUserAsync(string email, bool scrumMaster, bool productOwner, bool developer, int projectId) {
            return base.Channel.InsertProjectUserAsync(email, scrumMaster, productOwner, developer, projectId);
        }
        
        public bool DeleteProjectUser(string email, int projectId, string role) {
            return base.Channel.DeleteProjectUser(email, projectId, role);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteProjectUserAsync(string email, int projectId, string role) {
            return base.Channel.DeleteProjectUserAsync(email, projectId, role);
        }
        
        public bool IsProjectOwner(string email, int projectId) {
            return base.Channel.IsProjectOwner(email, projectId);
        }
        
        public System.Threading.Tasks.Task<bool> IsProjectOwnerAsync(string email, int projectId) {
            return base.Channel.IsProjectOwnerAsync(email, projectId);
        }
        
        public bool IsProductOwner(string email, int projectId) {
            return base.Channel.IsProductOwner(email, projectId);
        }
        
        public System.Threading.Tasks.Task<bool> IsProductOwnerAsync(string email, int projectId) {
            return base.Channel.IsProductOwnerAsync(email, projectId);
        }
        
        public bool IsScrumMaster(string email, int projectId) {
            return base.Channel.IsScrumMaster(email, projectId);
        }
        
        public System.Threading.Tasks.Task<bool> IsScrumMasterAsync(string email, int projectId) {
            return base.Channel.IsScrumMasterAsync(email, projectId);
        }
        
        public bool IsDeveloper(string email, int projectId) {
            return base.Channel.IsDeveloper(email, projectId);
        }
        
        public System.Threading.Tasks.Task<bool> IsDeveloperAsync(string email, int projectId) {
            return base.Channel.IsDeveloperAsync(email, projectId);
        }
        
        public string[] GetAssociatedProjectList(string email) {
            return base.Channel.GetAssociatedProjectList(email);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAssociatedProjectListAsync(string email) {
            return base.Channel.GetAssociatedProjectListAsync(email);
        }
        
        public string[] GetProjectTeamList(int projectId) {
            return base.Channel.GetProjectTeamList(projectId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetProjectTeamListAsync(int projectId) {
            return base.Channel.GetProjectTeamListAsync(projectId);
        }
        
        public void DeleteProductOwner(int projectId) {
            base.Channel.DeleteProductOwner(projectId);
        }
        
        public System.Threading.Tasks.Task DeleteProductOwnerAsync(int projectId) {
            return base.Channel.DeleteProductOwnerAsync(projectId);
        }
        
        public bool IsUserInTheProject(string email, int projectId, string role) {
            return base.Channel.IsUserInTheProject(email, projectId, role);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserInTheProjectAsync(string email, int projectId, string role) {
            return base.Channel.IsUserInTheProjectAsync(email, projectId, role);
        }
    }
}
