//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ScrumDevelopmentApplication.TaskServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TaskServiceReference.ITaskService")]
    public interface ITaskService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/InsertTask", ReplyAction="http://tempuri.org/ITaskService/InsertTaskResponse")]
        bool InsertTask(string name, string description, System.Nullable<bool> blocked, string reason, int hours, int userStoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/InsertTask", ReplyAction="http://tempuri.org/ITaskService/InsertTaskResponse")]
        System.Threading.Tasks.Task<bool> InsertTaskAsync(string name, string description, System.Nullable<bool> blocked, string reason, int hours, int userStoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/EditTask", ReplyAction="http://tempuri.org/ITaskService/EditTaskResponse")]
        bool EditTask(int id, string newName, string newDescription, int newHours, System.Nullable<bool> newBlocked, string newReason);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/EditTask", ReplyAction="http://tempuri.org/ITaskService/EditTaskResponse")]
        System.Threading.Tasks.Task<bool> EditTaskAsync(int id, string newName, string newDescription, int newHours, System.Nullable<bool> newBlocked, string newReason);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetName", ReplyAction="http://tempuri.org/ITaskService/GetNameResponse")]
        string GetName(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetName", ReplyAction="http://tempuri.org/ITaskService/GetNameResponse")]
        System.Threading.Tasks.Task<string> GetNameAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetDescription", ReplyAction="http://tempuri.org/ITaskService/GetDescriptionResponse")]
        string GetDescription(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetDescription", ReplyAction="http://tempuri.org/ITaskService/GetDescriptionResponse")]
        System.Threading.Tasks.Task<string> GetDescriptionAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetHours", ReplyAction="http://tempuri.org/ITaskService/GetHoursResponse")]
        System.Nullable<int> GetHours(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetHours", ReplyAction="http://tempuri.org/ITaskService/GetHoursResponse")]
        System.Threading.Tasks.Task<System.Nullable<int>> GetHoursAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetBlocked", ReplyAction="http://tempuri.org/ITaskService/GetBlockedResponse")]
        System.Nullable<bool> GetBlocked(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetBlocked", ReplyAction="http://tempuri.org/ITaskService/GetBlockedResponse")]
        System.Threading.Tasks.Task<System.Nullable<bool>> GetBlockedAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetReason", ReplyAction="http://tempuri.org/ITaskService/GetReasonResponse")]
        string GetReason(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetReason", ReplyAction="http://tempuri.org/ITaskService/GetReasonResponse")]
        System.Threading.Tasks.Task<string> GetReasonAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetOwner", ReplyAction="http://tempuri.org/ITaskService/GetOwnerResponse")]
        string GetOwner(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetOwner", ReplyAction="http://tempuri.org/ITaskService/GetOwnerResponse")]
        System.Threading.Tasks.Task<string> GetOwnerAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/BlockTask", ReplyAction="http://tempuri.org/ITaskService/BlockTaskResponse")]
        bool BlockTask(int id, string reason);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/BlockTask", ReplyAction="http://tempuri.org/ITaskService/BlockTaskResponse")]
        System.Threading.Tasks.Task<bool> BlockTaskAsync(int id, string reason);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/DeleteTask", ReplyAction="http://tempuri.org/ITaskService/DeleteTaskResponse")]
        bool DeleteTask(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/DeleteTask", ReplyAction="http://tempuri.org/ITaskService/DeleteTaskResponse")]
        System.Threading.Tasks.Task<bool> DeleteTaskAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/AssignTask", ReplyAction="http://tempuri.org/ITaskService/AssignTaskResponse")]
        bool AssignTask(int id, string userEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/AssignTask", ReplyAction="http://tempuri.org/ITaskService/AssignTaskResponse")]
        System.Threading.Tasks.Task<bool> AssignTaskAsync(int id, string userEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetTaskList", ReplyAction="http://tempuri.org/ITaskService/GetTaskListResponse")]
        string[] GetTaskList(int userStoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetTaskList", ReplyAction="http://tempuri.org/ITaskService/GetTaskListResponse")]
        System.Threading.Tasks.Task<string[]> GetTaskListAsync(int userStoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetLastTaskId", ReplyAction="http://tempuri.org/ITaskService/GetLastTaskIdResponse")]
        int GetLastTaskId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetLastTaskId", ReplyAction="http://tempuri.org/ITaskService/GetLastTaskIdResponse")]
        System.Threading.Tasks.Task<int> GetLastTaskIdAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITaskServiceChannel : ScrumDevelopmentApplication.TaskServiceReference.ITaskService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TaskServiceClient : System.ServiceModel.ClientBase<ScrumDevelopmentApplication.TaskServiceReference.ITaskService>, ScrumDevelopmentApplication.TaskServiceReference.ITaskService {
        
        public TaskServiceClient() {
        }
        
        public TaskServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TaskServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool InsertTask(string name, string description, System.Nullable<bool> blocked, string reason, int hours, int userStoryId) {
            return base.Channel.InsertTask(name, description, blocked, reason, hours, userStoryId);
        }
        
        public System.Threading.Tasks.Task<bool> InsertTaskAsync(string name, string description, System.Nullable<bool> blocked, string reason, int hours, int userStoryId) {
            return base.Channel.InsertTaskAsync(name, description, blocked, reason, hours, userStoryId);
        }
        
        public bool EditTask(int id, string newName, string newDescription, int newHours, System.Nullable<bool> newBlocked, string newReason) {
            return base.Channel.EditTask(id, newName, newDescription, newHours, newBlocked, newReason);
        }
        
        public System.Threading.Tasks.Task<bool> EditTaskAsync(int id, string newName, string newDescription, int newHours, System.Nullable<bool> newBlocked, string newReason) {
            return base.Channel.EditTaskAsync(id, newName, newDescription, newHours, newBlocked, newReason);
        }
        
        public string GetName(int id) {
            return base.Channel.GetName(id);
        }
        
        public System.Threading.Tasks.Task<string> GetNameAsync(int id) {
            return base.Channel.GetNameAsync(id);
        }
        
        public string GetDescription(int id) {
            return base.Channel.GetDescription(id);
        }
        
        public System.Threading.Tasks.Task<string> GetDescriptionAsync(int id) {
            return base.Channel.GetDescriptionAsync(id);
        }
        
        public System.Nullable<int> GetHours(int id) {
            return base.Channel.GetHours(id);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<int>> GetHoursAsync(int id) {
            return base.Channel.GetHoursAsync(id);
        }
        
        public System.Nullable<bool> GetBlocked(int id) {
            return base.Channel.GetBlocked(id);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<bool>> GetBlockedAsync(int id) {
            return base.Channel.GetBlockedAsync(id);
        }
        
        public string GetReason(int id) {
            return base.Channel.GetReason(id);
        }
        
        public System.Threading.Tasks.Task<string> GetReasonAsync(int id) {
            return base.Channel.GetReasonAsync(id);
        }
        
        public string GetOwner(int id) {
            return base.Channel.GetOwner(id);
        }
        
        public System.Threading.Tasks.Task<string> GetOwnerAsync(int id) {
            return base.Channel.GetOwnerAsync(id);
        }
        
        public bool BlockTask(int id, string reason) {
            return base.Channel.BlockTask(id, reason);
        }
        
        public System.Threading.Tasks.Task<bool> BlockTaskAsync(int id, string reason) {
            return base.Channel.BlockTaskAsync(id, reason);
        }
        
        public bool DeleteTask(int id) {
            return base.Channel.DeleteTask(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTaskAsync(int id) {
            return base.Channel.DeleteTaskAsync(id);
        }
        
        public bool AssignTask(int id, string userEmail) {
            return base.Channel.AssignTask(id, userEmail);
        }
        
        public System.Threading.Tasks.Task<bool> AssignTaskAsync(int id, string userEmail) {
            return base.Channel.AssignTaskAsync(id, userEmail);
        }
        
        public string[] GetTaskList(int userStoryId) {
            return base.Channel.GetTaskList(userStoryId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetTaskListAsync(int userStoryId) {
            return base.Channel.GetTaskListAsync(userStoryId);
        }
        
        public int GetLastTaskId() {
            return base.Channel.GetLastTaskId();
        }
        
        public System.Threading.Tasks.Task<int> GetLastTaskIdAsync() {
            return base.Channel.GetLastTaskIdAsync();
        }
    }
}
