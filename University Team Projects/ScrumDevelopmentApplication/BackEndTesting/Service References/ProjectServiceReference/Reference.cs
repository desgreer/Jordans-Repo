//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BackEndTesting.ProjectServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProjectServiceReference.IProjectService")]
    public interface IProjectService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/InsertProject", ReplyAction="http://tempuri.org/IProjectService/InsertProjectResponse")]
        bool InsertProject(string name, string email, string description, string startDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/InsertProject", ReplyAction="http://tempuri.org/IProjectService/InsertProjectResponse")]
        System.Threading.Tasks.Task<bool> InsertProjectAsync(string name, string email, string description, string startDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/InsertProjectUser", ReplyAction="http://tempuri.org/IProjectService/InsertProjectUserResponse")]
        bool InsertProjectUser(int id, string email, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/InsertProjectUser", ReplyAction="http://tempuri.org/IProjectService/InsertProjectUserResponse")]
        System.Threading.Tasks.Task<bool> InsertProjectUserAsync(int id, string email, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProjectList", ReplyAction="http://tempuri.org/IProjectService/GetProjectListResponse")]
        string[] GetProjectList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProjectList", ReplyAction="http://tempuri.org/IProjectService/GetProjectListResponse")]
        System.Threading.Tasks.Task<string[]> GetProjectListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/SearchForProjectUser", ReplyAction="http://tempuri.org/IProjectService/SearchForProjectUserResponse")]
        string[] SearchForProjectUser(string searchString, bool productOwner, bool scrumMaster, bool developer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/SearchForProjectUser", ReplyAction="http://tempuri.org/IProjectService/SearchForProjectUserResponse")]
        System.Threading.Tasks.Task<string[]> SearchForProjectUserAsync(string searchString, bool productOwner, bool scrumMaster, bool developer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProjectStartDate", ReplyAction="http://tempuri.org/IProjectService/GetProjectStartDateResponse")]
        string GetProjectStartDate(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProjectStartDate", ReplyAction="http://tempuri.org/IProjectService/GetProjectStartDateResponse")]
        System.Threading.Tasks.Task<string> GetProjectStartDateAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProjectDescription", ReplyAction="http://tempuri.org/IProjectService/GetProjectDescriptionResponse")]
        string GetProjectDescription(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/GetProjectDescription", ReplyAction="http://tempuri.org/IProjectService/GetProjectDescriptionResponse")]
        System.Threading.Tasks.Task<string> GetProjectDescriptionAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/DeleteProject", ReplyAction="http://tempuri.org/IProjectService/DeleteProjectResponse")]
        bool DeleteProject(string email, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/DeleteProject", ReplyAction="http://tempuri.org/IProjectService/DeleteProjectResponse")]
        System.Threading.Tasks.Task<bool> DeleteProjectAsync(string email, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/DeleteProjectUser", ReplyAction="http://tempuri.org/IProjectService/DeleteProjectUserResponse")]
        bool DeleteProjectUser(string email, int id, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProjectService/DeleteProjectUser", ReplyAction="http://tempuri.org/IProjectService/DeleteProjectUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteProjectUserAsync(string email, int id, string role);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProjectServiceChannel : BackEndTesting.ProjectServiceReference.IProjectService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProjectServiceClient : System.ServiceModel.ClientBase<BackEndTesting.ProjectServiceReference.IProjectService>, BackEndTesting.ProjectServiceReference.IProjectService {
        
        public ProjectServiceClient() {
        }
        
        public ProjectServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProjectServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProjectServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProjectServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool InsertProject(string name, string email, string description, string startDate) {
            return base.Channel.InsertProject(name, email, description, startDate);
        }
        
        public System.Threading.Tasks.Task<bool> InsertProjectAsync(string name, string email, string description, string startDate) {
            return base.Channel.InsertProjectAsync(name, email, description, startDate);
        }
        
        public bool InsertProjectUser(int id, string email, string role) {
            return base.Channel.InsertProjectUser(id, email, role);
        }
        
        public System.Threading.Tasks.Task<bool> InsertProjectUserAsync(int id, string email, string role) {
            return base.Channel.InsertProjectUserAsync(id, email, role);
        }
        
        public string[] GetProjectList() {
            return base.Channel.GetProjectList();
        }
        
        public System.Threading.Tasks.Task<string[]> GetProjectListAsync() {
            return base.Channel.GetProjectListAsync();
        }
        
        public string[] SearchForProjectUser(string searchString, bool productOwner, bool scrumMaster, bool developer) {
            return base.Channel.SearchForProjectUser(searchString, productOwner, scrumMaster, developer);
        }
        
        public System.Threading.Tasks.Task<string[]> SearchForProjectUserAsync(string searchString, bool productOwner, bool scrumMaster, bool developer) {
            return base.Channel.SearchForProjectUserAsync(searchString, productOwner, scrumMaster, developer);
        }
        
        public string GetProjectStartDate(int id) {
            return base.Channel.GetProjectStartDate(id);
        }
        
        public System.Threading.Tasks.Task<string> GetProjectStartDateAsync(int id) {
            return base.Channel.GetProjectStartDateAsync(id);
        }
        
        public string GetProjectDescription(int id) {
            return base.Channel.GetProjectDescription(id);
        }
        
        public System.Threading.Tasks.Task<string> GetProjectDescriptionAsync(int id) {
            return base.Channel.GetProjectDescriptionAsync(id);
        }
        
        public bool DeleteProject(string email, int id) {
            return base.Channel.DeleteProject(email, id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteProjectAsync(string email, int id) {
            return base.Channel.DeleteProjectAsync(email, id);
        }
        
        public bool DeleteProjectUser(string email, int id, string role) {
            return base.Channel.DeleteProjectUser(email, id, role);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteProjectUserAsync(string email, int id, string role) {
            return base.Channel.DeleteProjectUserAsync(email, id, role);
        }
    }
}
