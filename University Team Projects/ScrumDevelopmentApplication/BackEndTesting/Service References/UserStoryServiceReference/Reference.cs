//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BackEndTesting.UserStoryServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserStoryServiceReference.IUserStoryService")]
    public interface IUserStoryService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/InsertUserStory", ReplyAction="http://tempuri.org/IUserStoryService/InsertUserStoryResponse")]
        bool InsertUserStory(System.Nullable<int> newSBacklogId, string newTitle, string newDescription, int newPriority, int newProjectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/InsertUserStory", ReplyAction="http://tempuri.org/IUserStoryService/InsertUserStoryResponse")]
        System.Threading.Tasks.Task<bool> InsertUserStoryAsync(System.Nullable<int> newSBacklogId, string newTitle, string newDescription, int newPriority, int newProjectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/UpdateUserStory", ReplyAction="http://tempuri.org/IUserStoryService/UpdateUserStoryResponse")]
        bool UpdateUserStory(int id, string newTitle, string newDescription, int newStoryPoints, int newPriority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/UpdateUserStory", ReplyAction="http://tempuri.org/IUserStoryService/UpdateUserStoryResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserStoryAsync(int id, string newTitle, string newDescription, int newStoryPoints, int newPriority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/GetUserStory", ReplyAction="http://tempuri.org/IUserStoryService/GetUserStoryResponse")]
        string[] GetUserStory(int userStoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/GetUserStory", ReplyAction="http://tempuri.org/IUserStoryService/GetUserStoryResponse")]
        System.Threading.Tasks.Task<string[]> GetUserStoryAsync(int userStoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/DeleteUserStory", ReplyAction="http://tempuri.org/IUserStoryService/DeleteUserStoryResponse")]
        bool DeleteUserStory(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/DeleteUserStory", ReplyAction="http://tempuri.org/IUserStoryService/DeleteUserStoryResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserStoryAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/DoesUserStoryExist", ReplyAction="http://tempuri.org/IUserStoryService/DoesUserStoryExistResponse")]
        bool DoesUserStoryExist(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/DoesUserStoryExist", ReplyAction="http://tempuri.org/IUserStoryService/DoesUserStoryExistResponse")]
        System.Threading.Tasks.Task<bool> DoesUserStoryExistAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/GetLastUserStoryId", ReplyAction="http://tempuri.org/IUserStoryService/GetLastUserStoryIdResponse")]
        int GetLastUserStoryId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/GetLastUserStoryId", ReplyAction="http://tempuri.org/IUserStoryService/GetLastUserStoryIdResponse")]
        System.Threading.Tasks.Task<int> GetLastUserStoryIdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/GetPriority", ReplyAction="http://tempuri.org/IUserStoryService/GetPriorityResponse")]
        int GetPriority(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/GetPriority", ReplyAction="http://tempuri.org/IUserStoryService/GetPriorityResponse")]
        System.Threading.Tasks.Task<int> GetPriorityAsync(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/GetPriorityLength", ReplyAction="http://tempuri.org/IUserStoryService/GetPriorityLengthResponse")]
        int GetPriorityLength(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/GetPriorityLength", ReplyAction="http://tempuri.org/IUserStoryService/GetPriorityLengthResponse")]
        System.Threading.Tasks.Task<int> GetPriorityLengthAsync(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/GetUserStoryId", ReplyAction="http://tempuri.org/IUserStoryService/GetUserStoryIdResponse")]
        int GetUserStoryId(int priority, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/GetUserStoryId", ReplyAction="http://tempuri.org/IUserStoryService/GetUserStoryIdResponse")]
        System.Threading.Tasks.Task<int> GetUserStoryIdAsync(int priority, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/GetPriorityUpdate", ReplyAction="http://tempuri.org/IUserStoryService/GetPriorityUpdateResponse")]
        int GetPriorityUpdate(int userStoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/GetPriorityUpdate", ReplyAction="http://tempuri.org/IUserStoryService/GetPriorityUpdateResponse")]
        System.Threading.Tasks.Task<int> GetPriorityUpdateAsync(int userStoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/GetDescription", ReplyAction="http://tempuri.org/IUserStoryService/GetDescriptionResponse")]
        string GetDescription(int userStoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/GetDescription", ReplyAction="http://tempuri.org/IUserStoryService/GetDescriptionResponse")]
        System.Threading.Tasks.Task<string> GetDescriptionAsync(int userStoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/GetStoryPoints", ReplyAction="http://tempuri.org/IUserStoryService/GetStoryPointsResponse")]
        int GetStoryPoints(int userStoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/GetStoryPoints", ReplyAction="http://tempuri.org/IUserStoryService/GetStoryPointsResponse")]
        System.Threading.Tasks.Task<int> GetStoryPointsAsync(int userStoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/GetStoryList", ReplyAction="http://tempuri.org/IUserStoryService/GetStoryListResponse")]
        string[] GetStoryList(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/GetStoryList", ReplyAction="http://tempuri.org/IUserStoryService/GetStoryListResponse")]
        System.Threading.Tasks.Task<string[]> GetStoryListAsync(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/GetPriorityList", ReplyAction="http://tempuri.org/IUserStoryService/GetPriorityListResponse")]
        int[] GetPriorityList(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/GetPriorityList", ReplyAction="http://tempuri.org/IUserStoryService/GetPriorityListResponse")]
        System.Threading.Tasks.Task<int[]> GetPriorityListAsync(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/InsertPriority", ReplyAction="http://tempuri.org/IUserStoryService/InsertPriorityResponse")]
        bool InsertPriority(int oldpriority, int newpriority, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/InsertPriority", ReplyAction="http://tempuri.org/IUserStoryService/InsertPriorityResponse")]
        System.Threading.Tasks.Task<bool> InsertPriorityAsync(int oldpriority, int newpriority, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/IsStoryInTheSprint", ReplyAction="http://tempuri.org/IUserStoryService/IsStoryInTheSprintResponse")]
        bool IsStoryInTheSprint(int storyId, int sprintId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserStoryService/IsStoryInTheSprint", ReplyAction="http://tempuri.org/IUserStoryService/IsStoryInTheSprintResponse")]
        System.Threading.Tasks.Task<bool> IsStoryInTheSprintAsync(int storyId, int sprintId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserStoryServiceChannel : BackEndTesting.UserStoryServiceReference.IUserStoryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserStoryServiceClient : System.ServiceModel.ClientBase<BackEndTesting.UserStoryServiceReference.IUserStoryService>, BackEndTesting.UserStoryServiceReference.IUserStoryService {
        
        public UserStoryServiceClient() {
        }
        
        public UserStoryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserStoryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserStoryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserStoryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool InsertUserStory(System.Nullable<int> newSBacklogId, string newTitle, string newDescription, int newPriority, int newProjectId) {
            return base.Channel.InsertUserStory(newSBacklogId, newTitle, newDescription, newPriority, newProjectId);
        }
        
        public System.Threading.Tasks.Task<bool> InsertUserStoryAsync(System.Nullable<int> newSBacklogId, string newTitle, string newDescription, int newPriority, int newProjectId) {
            return base.Channel.InsertUserStoryAsync(newSBacklogId, newTitle, newDescription, newPriority, newProjectId);
        }
        
        public bool UpdateUserStory(int id, string newTitle, string newDescription, int newStoryPoints, int newPriority) {
            return base.Channel.UpdateUserStory(id, newTitle, newDescription, newStoryPoints, newPriority);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserStoryAsync(int id, string newTitle, string newDescription, int newStoryPoints, int newPriority) {
            return base.Channel.UpdateUserStoryAsync(id, newTitle, newDescription, newStoryPoints, newPriority);
        }
        
        public string[] GetUserStory(int userStoryId) {
            return base.Channel.GetUserStory(userStoryId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetUserStoryAsync(int userStoryId) {
            return base.Channel.GetUserStoryAsync(userStoryId);
        }
        
        public bool DeleteUserStory(int id) {
            return base.Channel.DeleteUserStory(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserStoryAsync(int id) {
            return base.Channel.DeleteUserStoryAsync(id);
        }
        
        public bool DoesUserStoryExist(int id) {
            return base.Channel.DoesUserStoryExist(id);
        }
        
        public System.Threading.Tasks.Task<bool> DoesUserStoryExistAsync(int id) {
            return base.Channel.DoesUserStoryExistAsync(id);
        }
        
        public int GetLastUserStoryId() {
            return base.Channel.GetLastUserStoryId();
        }
        
        public System.Threading.Tasks.Task<int> GetLastUserStoryIdAsync() {
            return base.Channel.GetLastUserStoryIdAsync();
        }
        
        public int GetPriority(int projectId) {
            return base.Channel.GetPriority(projectId);
        }
        
        public System.Threading.Tasks.Task<int> GetPriorityAsync(int projectId) {
            return base.Channel.GetPriorityAsync(projectId);
        }
        
        public int GetPriorityLength(int projectId) {
            return base.Channel.GetPriorityLength(projectId);
        }
        
        public System.Threading.Tasks.Task<int> GetPriorityLengthAsync(int projectId) {
            return base.Channel.GetPriorityLengthAsync(projectId);
        }
        
        public int GetUserStoryId(int priority, int projectId) {
            return base.Channel.GetUserStoryId(priority, projectId);
        }
        
        public System.Threading.Tasks.Task<int> GetUserStoryIdAsync(int priority, int projectId) {
            return base.Channel.GetUserStoryIdAsync(priority, projectId);
        }
        
        public int GetPriorityUpdate(int userStoryId) {
            return base.Channel.GetPriorityUpdate(userStoryId);
        }
        
        public System.Threading.Tasks.Task<int> GetPriorityUpdateAsync(int userStoryId) {
            return base.Channel.GetPriorityUpdateAsync(userStoryId);
        }
        
        public string GetDescription(int userStoryId) {
            return base.Channel.GetDescription(userStoryId);
        }
        
        public System.Threading.Tasks.Task<string> GetDescriptionAsync(int userStoryId) {
            return base.Channel.GetDescriptionAsync(userStoryId);
        }
        
        public int GetStoryPoints(int userStoryId) {
            return base.Channel.GetStoryPoints(userStoryId);
        }
        
        public System.Threading.Tasks.Task<int> GetStoryPointsAsync(int userStoryId) {
            return base.Channel.GetStoryPointsAsync(userStoryId);
        }
        
        public string[] GetStoryList(int projectId) {
            return base.Channel.GetStoryList(projectId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetStoryListAsync(int projectId) {
            return base.Channel.GetStoryListAsync(projectId);
        }
        
        public int[] GetPriorityList(int projectId) {
            return base.Channel.GetPriorityList(projectId);
        }
        
        public System.Threading.Tasks.Task<int[]> GetPriorityListAsync(int projectId) {
            return base.Channel.GetPriorityListAsync(projectId);
        }
        
        public bool InsertPriority(int oldpriority, int newpriority, int projectId) {
            return base.Channel.InsertPriority(oldpriority, newpriority, projectId);
        }
        
        public System.Threading.Tasks.Task<bool> InsertPriorityAsync(int oldpriority, int newpriority, int projectId) {
            return base.Channel.InsertPriorityAsync(oldpriority, newpriority, projectId);
        }
        
        public bool IsStoryInTheSprint(int storyId, int sprintId) {
            return base.Channel.IsStoryInTheSprint(storyId, sprintId);
        }
        
        public System.Threading.Tasks.Task<bool> IsStoryInTheSprintAsync(int storyId, int sprintId) {
            return base.Channel.IsStoryInTheSprintAsync(storyId, sprintId);
        }
    }
}
