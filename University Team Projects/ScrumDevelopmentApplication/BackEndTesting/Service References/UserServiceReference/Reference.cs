//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BackEndTesting.UserServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserServiceReference.IUserService")]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/InsertUser", ReplyAction="http://tempuri.org/IUserService/InsertUserResponse")]
        bool InsertUser(string email, string name, string password, bool productOwner, bool scrumMaster, bool developer, string bio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/InsertUser", ReplyAction="http://tempuri.org/IUserService/InsertUserResponse")]
        System.Threading.Tasks.Task<bool> InsertUserAsync(string email, string name, string password, bool productOwner, bool scrumMaster, bool developer, string bio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/DeleteUser", ReplyAction="http://tempuri.org/IUserService/DeleteUserResponse")]
        bool DeleteUser(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/DeleteUser", ReplyAction="http://tempuri.org/IUserService/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AuthenticatedLogin", ReplyAction="http://tempuri.org/IUserService/AuthenticatedLoginResponse")]
        string AuthenticatedLogin(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AuthenticatedLogin", ReplyAction="http://tempuri.org/IUserService/AuthenticatedLoginResponse")]
        System.Threading.Tasks.Task<string> AuthenticatedLoginAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateUser", ReplyAction="http://tempuri.org/IUserService/UpdateUserResponse")]
        bool UpdateUser(string email, string name, string oldpassword, string password, bool productOwner, bool scrumMaster, bool developer, string bio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateUser", ReplyAction="http://tempuri.org/IUserService/UpdateUserResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserAsync(string email, string name, string oldpassword, string password, bool productOwner, bool scrumMaster, bool developer, string bio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetLoggedInName", ReplyAction="http://tempuri.org/IUserService/GetLoggedInNameResponse")]
        string GetLoggedInName(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetLoggedInName", ReplyAction="http://tempuri.org/IUserService/GetLoggedInNameResponse")]
        System.Threading.Tasks.Task<string> GetLoggedInNameAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetLoggedInDeveloper", ReplyAction="http://tempuri.org/IUserService/GetLoggedInDeveloperResponse")]
        bool GetLoggedInDeveloper(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetLoggedInDeveloper", ReplyAction="http://tempuri.org/IUserService/GetLoggedInDeveloperResponse")]
        System.Threading.Tasks.Task<bool> GetLoggedInDeveloperAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetLoggedInProductOwner", ReplyAction="http://tempuri.org/IUserService/GetLoggedInProductOwnerResponse")]
        bool GetLoggedInProductOwner(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetLoggedInProductOwner", ReplyAction="http://tempuri.org/IUserService/GetLoggedInProductOwnerResponse")]
        System.Threading.Tasks.Task<bool> GetLoggedInProductOwnerAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetLoggedInScrumMaster", ReplyAction="http://tempuri.org/IUserService/GetLoggedInScrumMasterResponse")]
        bool GetLoggedInScrumMaster(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetLoggedInScrumMaster", ReplyAction="http://tempuri.org/IUserService/GetLoggedInScrumMasterResponse")]
        System.Threading.Tasks.Task<bool> GetLoggedInScrumMasterAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/CompareEmail", ReplyAction="http://tempuri.org/IUserService/CompareEmailResponse")]
        bool CompareEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/CompareEmail", ReplyAction="http://tempuri.org/IUserService/CompareEmailResponse")]
        System.Threading.Tasks.Task<bool> CompareEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/CheckIfRolesValid", ReplyAction="http://tempuri.org/IUserService/CheckIfRolesValidResponse")]
        bool CheckIfRolesValid(string email, System.Nullable<bool> scrumMaster, System.Nullable<bool> productOwner, System.Nullable<bool> developer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/CheckIfRolesValid", ReplyAction="http://tempuri.org/IUserService/CheckIfRolesValidResponse")]
        System.Threading.Tasks.Task<bool> CheckIfRolesValidAsync(string email, System.Nullable<bool> scrumMaster, System.Nullable<bool> productOwner, System.Nullable<bool> developer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetLoggedBio", ReplyAction="http://tempuri.org/IUserService/GetLoggedBioResponse")]
        string GetLoggedBio(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetLoggedBio", ReplyAction="http://tempuri.org/IUserService/GetLoggedBioResponse")]
        System.Threading.Tasks.Task<string> GetLoggedBioAsync(string email);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : BackEndTesting.UserServiceReference.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<BackEndTesting.UserServiceReference.IUserService>, BackEndTesting.UserServiceReference.IUserService {
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool InsertUser(string email, string name, string password, bool productOwner, bool scrumMaster, bool developer, string bio) {
            return base.Channel.InsertUser(email, name, password, productOwner, scrumMaster, developer, bio);
        }
        
        public System.Threading.Tasks.Task<bool> InsertUserAsync(string email, string name, string password, bool productOwner, bool scrumMaster, bool developer, string bio) {
            return base.Channel.InsertUserAsync(email, name, password, productOwner, scrumMaster, developer, bio);
        }
        
        public bool DeleteUser(string email) {
            return base.Channel.DeleteUser(email);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(string email) {
            return base.Channel.DeleteUserAsync(email);
        }
        
        public string AuthenticatedLogin(string email, string password) {
            return base.Channel.AuthenticatedLogin(email, password);
        }
        
        public System.Threading.Tasks.Task<string> AuthenticatedLoginAsync(string email, string password) {
            return base.Channel.AuthenticatedLoginAsync(email, password);
        }
        
        public bool UpdateUser(string email, string name, string oldpassword, string password, bool productOwner, bool scrumMaster, bool developer, string bio) {
            return base.Channel.UpdateUser(email, name, oldpassword, password, productOwner, scrumMaster, developer, bio);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserAsync(string email, string name, string oldpassword, string password, bool productOwner, bool scrumMaster, bool developer, string bio) {
            return base.Channel.UpdateUserAsync(email, name, oldpassword, password, productOwner, scrumMaster, developer, bio);
        }
        
        public string GetLoggedInName(string email) {
            return base.Channel.GetLoggedInName(email);
        }
        
        public System.Threading.Tasks.Task<string> GetLoggedInNameAsync(string email) {
            return base.Channel.GetLoggedInNameAsync(email);
        }
        
        public bool GetLoggedInDeveloper(string email) {
            return base.Channel.GetLoggedInDeveloper(email);
        }
        
        public System.Threading.Tasks.Task<bool> GetLoggedInDeveloperAsync(string email) {
            return base.Channel.GetLoggedInDeveloperAsync(email);
        }
        
        public bool GetLoggedInProductOwner(string email) {
            return base.Channel.GetLoggedInProductOwner(email);
        }
        
        public System.Threading.Tasks.Task<bool> GetLoggedInProductOwnerAsync(string email) {
            return base.Channel.GetLoggedInProductOwnerAsync(email);
        }
        
        public bool GetLoggedInScrumMaster(string email) {
            return base.Channel.GetLoggedInScrumMaster(email);
        }
        
        public System.Threading.Tasks.Task<bool> GetLoggedInScrumMasterAsync(string email) {
            return base.Channel.GetLoggedInScrumMasterAsync(email);
        }
        
        public bool CompareEmail(string email) {
            return base.Channel.CompareEmail(email);
        }
        
        public System.Threading.Tasks.Task<bool> CompareEmailAsync(string email) {
            return base.Channel.CompareEmailAsync(email);
        }
        
        public bool CheckIfRolesValid(string email, System.Nullable<bool> scrumMaster, System.Nullable<bool> productOwner, System.Nullable<bool> developer) {
            return base.Channel.CheckIfRolesValid(email, scrumMaster, productOwner, developer);
        }
        
        public System.Threading.Tasks.Task<bool> CheckIfRolesValidAsync(string email, System.Nullable<bool> scrumMaster, System.Nullable<bool> productOwner, System.Nullable<bool> developer) {
            return base.Channel.CheckIfRolesValidAsync(email, scrumMaster, productOwner, developer);
        }
        
        public string GetLoggedBio(string email) {
            return base.Channel.GetLoggedBio(email);
        }
        
        public System.Threading.Tasks.Task<string> GetLoggedBioAsync(string email) {
            return base.Channel.GetLoggedBioAsync(email);
        }
    }
}
