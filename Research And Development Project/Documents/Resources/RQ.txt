Research Questions:

RQ1 - Is it possible using data extracted from the Github API to determine what projects become obselete and why?
* I could ask questions such as - does this correlate with less watchers, contributors, stars etc over a period of time?
                                - and do these stats above drop dramatically or over a long period of time? (extract mean reduction rates etc)
								- as a supporting RQ i could invesigate the inverse (rapid growth of new projects to fill a need etc
								
RQ2 - Is it possible using data extracted from the Github API to predict a decline or increase in a OS projects popularity? 
* similar to the above but more open ended

RQ3 - Is it possible using data extracted from the Github API to determine if OS software evolution over time reflects lehmans laws?
* https://en.wikipedia.org/wiki/Lehman%27s_laws_of_software_evolution - "Continuing Growth" if a project is not supported do people stop 'watching it' etc
* focus in on "continuing growth" & "continuing change" & "declining quality"

RQ4 - Is it possible using data extracted from the Github API to determine if modern computing trends affected the evolution of OS projects on GitHub?
* could look at touch screen, mobile websites (and others) and projects that focus on these topics

RQ5 - Using data extracted from the Github Api is it possible to determine if projects hosted on Github have become more popular as users have adopted GitHub as a repository of choice?
* Here we could look at long running projects only
*collect data about Github general usage over time (user base increasing etc, more repos in general)
*and compare if additions, commits (qualified with only top 100 contributors commits) etc correlate with Githubs 'boom period'

RQ6 - As OS projects on Github become more popular and more complex over time, do the amount of 'issues' increase as well?
*can access first issue as 'https://api.github.com/repos/jquery/jquery/issues/1' so get total and loop - normal issue json does not show closed issues only open * so its doable
*can look at things like the rate of fixing issues
*can get most popular contributors and see stats on how many they raise/fix over time periods - as popularity increases do more outsiders help?
https://api.github.com/repos/jquery/jquery/issues?state=all

RQ7 - Is it possible using data from GITHUB to determine the rates of growth for a project?
*look at changes in watchers, stars, additions every quarter eg. q1 = 10 stars, q2 = 20 stars - + rate 10 growth (then somehow sythesis with other metrics)
*could be a good general RQ from which to choose supporting RQ's
*could add ways to classify growth rates into categories
*add this to work bench, which crawls all the data and then presents a conclusion -  a project 'heartbeat' or 'health'

RQ8 - How does the evolution of a software project on Github affect the users who interact with the project?
*can look at mean pulls for contributor, mean forks, how many other repos does the user contribute to? how many are exclusive to one project, does this vary over time?
*do users who are watching also commit to other projects aside from proj in question, if so how many, how often do they commit etc
*need to word this better (refine)

RQ9 - Is it possible to extract data about a project hosted on Github which can be used to measure a projects health? (is it losing users, less watchers, downloads etc)
*will allow aspects of 'feature extraction' from which we can apply the likes of nearest neighbour to classify based on the repo data against a training set

RQ10 - How do issues on Github repositories evolve from 'open' to 'close' and what factors impact this transition
-can look into how fast issues are solved
-what issues are quickly solved or slowly solved - life spans
-what contributors solve what issues
-what does the issue message tell us about the issue? how often is the issue updated before it is solved?
-how often do assignees change
- i think this has a lot of depth, API supports getting very useful data

RQ11 - What impacts a user starring a repository on Github to becoming a watcher?
-links with 12

RQ12 - Does a contributor to a repository on Github follow the process or Starring, watching prior to contributing?




General notes:

* we can create graphs that compare forks (or pulls) as stars (contributors, LOC) increase (scatter graphs etc)
* some of these couldbe supporting hypotheses or supporting Rq's
* additional parameters on github api calls for starring can get time user starred the repo (very useful)
*can list all contributors
*can list comments (analyse for comment length changes over time etc)
*rdoes read me size correlate with repository size over time?

*IMPORTANT - to get commits its possible to clone the repo on the server side (only locally), and crawl the commits. (need to experiment on speed etc) 
the question is, it is worth building in this cloning process? (any downsides etc) since it will be never be seen by the 'user'


